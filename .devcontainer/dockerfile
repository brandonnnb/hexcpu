# Use Ubuntu 22.04 as the base image
FROM ubuntu:22.04

# Set non-interactive mode for apt-get
ENV DEBIAN_FRONTEND=noninteractive

# Define versions as environment variables
ENV VERILATOR_VERSION v5.028
ENV GTKWAVE_VERSION master
ENV COCOTB_VERSION 1.9.1

# Update and install dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    python3 \
    python3-pip \
    libgtk-3-dev \
    libgtk-4-dev \
    pkg-config \
    wget \
    autoconf \
    automake \
    libtool \
    g++ \
    bison \
    flex \
    libfl2 \
    libfl-dev \
    zlib1g-dev \
    perl \
    python3-docutils \
    cmake \
    libz3-dev \
    tcl-dev \
    tk-dev \
    libx11-dev \
    libxaw7-dev \
    libxt-dev \
    libreadline-dev \
    bzip2 \
    libbz2-dev \
    gperf \
    desktop-file-utils \
    libjudy-dev \
    libgirepository1.0-dev \
    ninja-build \
    help2man \
    neovim \
    fzf \
    ripgrep \
    bat \
    curl

RUN pip install --upgrade pip

# Pip Deps.
# Meson is used for GTKWave
# Rich is a Python TUI library used in the model
RUN pip install meson rich

# Clone GTKWave repository (only the first time)
RUN git clone https://github.com/gtkwave/gtkwave.git /gtkwave

# Build GTKWave from source (using the instructions from their GitHub)
RUN cd /gtkwave && \
    git checkout ${GTKWAVE_VERSION} && \
    meson setup build && \
    meson compile -C build && \
    meson install -C build

# Clone Verilator repository (only the first time)
RUN git clone https://github.com/verilator/verilator /verilator

# Move into the Verilator directory
RUN cd /verilator && \
    # Unset environment variables (for bash and csh)
    unset VERILATOR_ROOT || true && unsetenv VERILATOR_ROOT || true && \
    # Pull the latest changes and tags from the git repository
    git fetch --all && git tag && \
    git checkout ${VERILATOR_VERSION} -b sili-${VERILATOR_VERSION} && \
    # Create ./configure script and configure the build
    autoconf && ./configure && \
    # Build and install Verilator
    make -j$(nproc) && make install

# Install CocoTB (specific version using env variable)
RUN pip3 install cocotb==${COCOTB_VERSION}

# Install Rust toolchain (required for Cargo)
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y

# Set the correct path for Rust and Cargo binaries
ENV PATH=/root/.cargo/bin:$PATH

# Install your Cargo package (replace `package_name` with the package you want to install)
RUN cargo install svlint bender

# Set the Verible version you want to install
ENV VERIBLE_VERSION v0.0-3831-g32b2456e

# Determine architecture and download the appropriate Verible release
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then \
    wget https://github.com/chipsalliance/verible/releases/download/${VERIBLE_VERSION}/verible-${VERIBLE_VERSION}-linux-static-x86_64.tar.gz -O /verible.tar.gz; \
    elif [ "$ARCH" = "aarch64" ]; then \
    wget https://github.com/chipsalliance/verible/releases/download/${VERIBLE_VERSION}/verible-${VERIBLE_VERSION}-linux-static-arm64.tar.gz -O /verible.tar.gz; \
    else \
    echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    tar -xvzf /verible.tar.gz && \
    cp -r /verible-*/bin/* /usr/local/bin/ && \
    rm -rf /verible-*

# Verify installation
RUN verible-verilog-format --version

# Clean up
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# ENV CONFIG
############
# Set the correct path for Rust and Cargo binaries
ENV PATH="/root/.cargo/bin:${PATH}"
ENV PROJECT_ROOT="/workspace"
ENV ARTEFACT_ROOT="${PROJECT_ROOT}/run"
ENV PYTHONPYCACHEPREFIX=${ARTEFACT_ROOT}

# USEFUL MACROS
###############

RUN echo 'alias g="git"' >> ~/.bashrc
RUN echo 'alias lint="./infra/lint.sh"' >> ~/.bashrc
RUN echo 'alias sim="./infra/sim.sh"' >> ~/.bashrc